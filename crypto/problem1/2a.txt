Adam Najman
Cryptography
Problem Set 1
Question 2a


Typically the Diffie-Hellman key exchange expects g
to be a primitive root of p. That allows for all values
from 1 to p-1. The question, however, explicitly asks
us to redesign the protocol baring the use of a primitive root.
This presents an interesting challenge.

First of all, any g that is not a primitive root of p will
yield a smaller set of numbers than the primitive root would.
This means we are not going to have a monotonically increasing
series from 1 to p-1, but rather some holes, and possibly some
repeating numbers. For example, if we choose p to be 11, and
g to be 3, we get the set of {1, 3, 4, 5, 9}. This leaves out
{2, 6, 7, 8, 10}. Notice the union of these sets produces all
values from 1 to p-1, as if we had chosen 2 as our generator.

This presents a huge boon to attackers. Since the order of a 
non primitive root is smaller than if we had used a primitive
root they have less guesses to calculate. 

The first countermeasure that comes to mind is to make p very 
large. This will help ensure that there is much more ground to 
cover by a potential hacker. In fact, if p is sufficiently large,
it is possible that by the time the invader obtains the information
if will be of no use to them. As long as it isn't obvious that
g is not a primitive root of p, the attacker will be non the wiser.
For example, it's a bad idea to choose p-1 as your generator for
this reason. 

In some cases, choosing a non-primitive root may be a good idea.
If the attacker has an idea of what p might be, than she may get 
be able to develop a divide and conquer algorithm based on the
bounds of the primitive root. If she lacks access to the prime
number and only has the generator, it might be close to impossible
to utilize parallelization in this case. This is, of course as long
as we do not select 0 or 1 to be our generator


