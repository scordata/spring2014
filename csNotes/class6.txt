Graph algorithms:
  
    Shortest paths:
      Viterbi - DAG   O(V+E)                

Dijkstra inherists prior path costs

                                      With binary Heap:       With Array:
      Dijkstra - Non-negative edges // O(VlogV + ElogV)         O(V^2+E)
        (look at fibbonacci heap)
        while pq isn't empty: //       O(V)
          v = extract_best(pq)//       O(logV)                  O(V)
          for all v to u edges: 
            update(v->u) // d(u) min= d(v) + c(v, u)
            decrease_key(pq, u) //    O(E*logV)                 O(1)


      Array faster with dense graphs
      Heap faster with sparce graph

      IF E = O(V^2):
        V^2logV > V^2
      IF E = O(V):
        VlogV < V^2
      IF E = (VlogV):
        Vlog^2V < V^2+vlogV
      IF E = O(V^2/logV):
        O((V+E)logV) = O(V^2+E)


      Bellman - Ford

Min Spanning Tree:
 Prim (Like Dijkstra)
 array: O(V^2 +E)
 heap: O((E+V)logV) = O(ElogV + VlogV)
  prim only considers next node costs

  pq = {s->u|uC-neighbor(s)}
  while pq is not empty:
    (v, u)<-extract_best(pq)
    remove v`->u edges from pq for v` in s
    add all u-> v edges to pq for v`C- v-s
 (other implementation)
  pq = {s:0}
  while pq isn't empty:
    u = extract(pq)
    for u->v:
      update d(V) min= c(u,v)
      decrease_key(pq, v)
Kruskal
 = O(ElogV + V^2)
